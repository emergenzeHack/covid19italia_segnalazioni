# FIXME This is needed because it's not possible to cache issue jobs
# Remove this file, delete cachehack branch and rename updateCSV.yml.bak file to
# updateCSV.yml as soon as github implements cache for issues jobs

name: cacheHack

on:
  issues:
    types: [edited, deleted, labeled, unlabeled]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Skip task if issues is not edited OR changed label is not "accepted"
      run: |
        import json
        import os

        with open(os.getenv('GITHUB_EVENT_PATH')) as json_file:
          data = json.load(json_file)
          if data['action'] == "labeled" or data['action'] == "unlabeled":
            if data['label']['name'].lower() == "${{ secrets.ACCEPTED_LABEL }}":
              print("::set-output name=skip::false")
            else:
              print("::set-output name=skip::true")
          else:
            for label in data['issue']['labels']:
              if label['name'].lower() == "${{ secrets.ACCEPTED_LABEL }}":
                print("::set-output name=skip::false")
                break
            else:
              print("::set-output name=skip::true")
      shell: python
      id: skip

    - run: pip install pyyaml lxml
      if: steps.skip.outputs.skip != 'true'

    - name: Verify that yamldata is ok
      if: steps.skip.outputs.skip != 'true'
      run: |
        import http.client
        import json
        import yaml
        import os
        import sys
        from lxml import html

        with open(os.getenv('GITHUB_EVENT_PATH')) as json_file:
          try:
            data = json.load(json_file)
            body = data['issue']['body']
            tree = html.fromstring(body)
            yamldataRaw=tree.xpath("//yamldata/text()")
            yamldataStr=yamldataRaw[0] if len(yamldataRaw) > 0 else None
            yaml.safe_load(yamldataStr)
          except Exception as e:
            issue_number = data['issue']['number']
            headers = {"Accept":"application/vnd.github.v3+json",
                       "Authorization":"token ${{ secrets.GITHUB_TOKEN }}",
                       "User-Agent":"covid19italia"}
            conn = http.client.HTTPSConnection("api.github.com")
            conn.request("DELETE",
                        "/repos/${{ github.repository }}/issues/{}/labels/${{ secrets.ACCEPTED_LABEL }}".format(issue_number),
                        "", headers)
            response = conn.getresponse()
            error = f"```\n{str(e)}\n```"
            params = json.dumps({"body":error})
            conn.request("POST",
                        "/repos/${{ github.repository }}/issues/{}/comments".format(issue_number),
                        params, headers)
            response = conn.getresponse()
            print(response.status, response.reason)
            print(response.read())
            raise
      shell: python

    - uses: actions/checkout@v2
      if: steps.skip.outputs.skip != 'true'
      with:
        ref: cachehack
        fetch-depth: 0

    - name: Commit GITHUB_EVENT_PATH as event.json
      if: steps.skip.outputs.skip != 'true'
      run: |
        mkdir -m 700 ~/.ssh
        echo "${{ secrets.SELF_PUSH_SSH_KEY }}" > ~/.ssh/id_ed25519
        chmod 0600 ~/.ssh/id_ed25519
        pushurl="git@github.com:$(git config --local remote.origin.url | sed 's;^https://github\.com/;;')"
        cp "${GITHUB_EVENT_PATH}" event.json
        git config --local user.name "ehack-italy"
        git config --local user.email "62019251+ehack-italy@users.noreply.github.com"
        git commit --amend -m "$(jq -r .issue.title event.json)" event.json
        git push -f "$pushurl"
